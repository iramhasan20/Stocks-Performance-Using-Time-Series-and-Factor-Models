import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Convert the 'date' column to datetime format

df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')

# Plot the time series data
plt.figure(figsize=(14, 7))

# Plot each column R1, R2, Rm
plt.plot(df['Date'], df['A'], label='A', color='green')
plt.plot(df['Date'], df['B'], label='B', color='darkorange')
plt.plot(df['Date'], df['C'], label='C', color='blue')

# Set the limits for y-axis
plt.ylim(50, 250)


# Format the x-axis to show month and year at 6-month intervals starting from April 2015
ax = plt.gca()
locator = mdates.MonthLocator(interval=3)
formatter = mdates.DateFormatter('%b %Y')

ax.xaxis.set_major_locator(locator)
ax.xaxis.set_major_formatter(formatter)

# Set x-axis limits from April 2015 to March 2022
ax.set_xlim([pd.Timestamp('2015-04-01'), pd.Timestamp('2022-03-31')])

# Rotate date labels for better readability
plt.xticks(rotation=45)

# Show legend at the center below the graph
plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

# Add overall title at the top left side above the graph
plt.annotate('Overall Period', xy=(0, 1), xytext=(-20, 20),
             xycoords='axes fraction', textcoords='offset points',
             ha='left', va='top', fontsize=14)

# Display the plot
plt.show()

df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')

# Filter the data for the specific date range
start_date = '2015-04-06'
end_date = '2018-09-28'
mask = (df['Date'] >= start_date) & (df['Date'] <= end_date)
df = df.loc[mask]

# Plot the time series data
plt.figure(figsize=(14, 7))

# Plot each column A, B, C
plt.plot(df['Date'], df['A'], label='A', color='green')
plt.plot(df['Date'], df['B'], label='B', color='darkorange')
plt.plot(df['Date'], df['C'], label='C', color='blue')

# Set the limits for y-axis
plt.ylim(50, 250)

# Format the x-axis to show month and year at 6-month intervals
ax = plt.gca()
locator = mdates.MonthLocator(interval=6)
formatter = mdates.DateFormatter('%b %Y')

ax.xaxis.set_major_locator(locator)
ax.xaxis.set_major_formatter(formatter)

# Set x-axis limits from April 6, 2015, to September 28, 2018
ax.set_xlim([pd.Timestamp('2015-04-06'), pd.Timestamp('2018-09-28')])

# Rotate date labels for better readability
plt.xticks(rotation=45)

# Show legend at the center below the graph
plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

# Add overall title at the top left side above the graph
plt.annotate('Sub-period I', xy=(0, 1), xytext=(-20, 20),
             xycoords='axes fraction', textcoords='offset points',
             ha='left', va='top', fontsize=14)

# Display the plot
plt.show()

# Filter the data for the specific date range
start_date = '2018-10-02'
end_date = '2022-03-31'
mask = (df['Date'] >= start_date) & (df['Date'] <= end_date)
df = df.loc[mask]

# Plot the time series data
plt.figure(figsize=(14, 7))

# Plot each column A, B, C
plt.plot(df['Date'], df['A'], label='A', color='green')
plt.plot(df['Date'], df['B'], label='B', color='darkorange')
plt.plot(df['Date'], df['C'], label='C', color='blue')

# Set the limits for y-axis
plt.ylim(50, 250)

# Format the x-axis to show month and year at 6-month intervals
ax = plt.gca()
locator = mdates.MonthLocator(interval=6)
formatter = mdates.DateFormatter('%b %Y')

ax.xaxis.set_major_locator(locator)
ax.xaxis.set_major_formatter(formatter)

# Set x-axis limits from April 6, 2015, to September 28, 2018
ax.set_xlim([pd.Timestamp('2018-10-02'), pd.Timestamp('2022-03-31')])

# Rotate date labels for better readability
plt.xticks(rotation=45)

# Show legend at the center below the graph
plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

# Add overall title at the top left side above the graph
plt.annotate('Sub-period II', xy=(0, 1), xytext=(-20, 20),
             xycoords='axes fraction', textcoords='offset points',
             ha='left', va='top', fontsize=14)

# Display the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('/content/return series graph.csv')

# Assuming your date column is named 'Date'
df['Date'] = pd.to_datetime(df['Date'])

# Define start date and end date
start_date = df['Date'].min()
end_date = df['Date'].max()

# Plotting
fig, axs = plt.subplots(3, 1, figsize=(10, 8), sharex=True, gridspec_kw={'top': 0.9, 'hspace': 0.4})

# Overall period title
fig.text(0.5, 0.95, 'Overall period', fontsize=12, va='top', ha='center')

# Plot each variable in a subplot
for i, var in enumerate(['A', 'B', 'C']):
    axs[i].plot(df['Date'], df[var])
    axs[i].set_ylabel(var)
    axs[i].set_xlim(start_date, end_date)

plt.show()

# Function to perform t-test and F-test
def perform_tests(data1, data2):
    # t-test
    t_stat, t_p_value = stats.ttest_ind(data1, data2, equal_var=False)  # Assuming unequal variance

    # F-test
    f_stat = np.var(data1, ddof=1) / np.var(data2, ddof=1)
    dfn = len(data1) - 1
    dfd = len(data2) - 1
    f_p_value = 1 - stats.f.cdf(f_stat, dfn, dfd)

    return t_stat, t_p_value, f_stat, f_p_value

# Define pairs of variables to compare
pairs = [('A', 'B'), ('A', 'C'), ('B', 'C')]

# Collect results
results = {}
for var1, var2 in pairs:
    data1 = df[var1]
    data2 = df[var2]
    t_stat, t_p_value, f_stat, f_p_value = perform_tests(data1, data2)
    results[(var1, var2)] = {
        't-statistic': t_stat,
        't-p-value': t_p_value,
        'F-statistic': f_stat,
        'F-p-value': f_p_value
    }

# Display results
for (var1, var2), res in results.items():
    print(f"Comparison: {var1} vs {var2}")
    print(f"  t-statistic: {res['t-statistic']:.4f}, t-p-value: {res['t-p-value']:.4e}")
    print(f"  F-statistic: {res['F-statistic']:.4f}, F-p-value: {res['F-p-value']:.4e}")
    print
